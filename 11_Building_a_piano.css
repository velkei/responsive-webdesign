/*

Now that you have reset the html box model, 
you need to pass that on to the elements within as well. 
To do this, you can set the box-sizing property to inherit, 
which will tell the targeted elements 
to use the same value as the parent element.

You will also need to target the pseudo-elements, 
which are special keywords that follow a selector. 
The two pseudo-elements 
you will be using are the ::before and ::after pseudo-elements.

The ::before selector creates a pseudo-element 
which is the first child of the selected element, 
while the ::after selector creates a pseudo-element 
which is the last child of the selected element. 
These pseudo-elements are often used 
to create cosmetic content, which you will see later in this project.

For now, create a CSS selector 
to target all elements with *, and include 
the pseudo-elements with ::before and ::after. 
Set the box-sizing property to inherit.

---------------------------------------------------

*,
::before,
::after {
  box-sizing:inherit;
}

----------------------------------------------------

Now it is time to use the pseudo-selectors you prepared for earlier. 
To create the black keys, add a new .key.black--key::after selector. 
This will target the elements with the class key black--key, 
and select the pseudo-element after these elements in the HTML.

In the new selector, set the background-color to #1d1e22. 
Also set the content property to "". 
This will make the pseudo-elements empty.

The content property is used to set or override 
the content of the element. By default, 
the pseudo-elements created 
by the ::before and ::after pseudo-selectors are empty, 
and the elements will not be rendered to the page. 
Setting the content property to an empty string "" 
will ensure the element is rendered to the page while still being empty.

If you would like to experiment, 
try removing the background-color property and setting 
different values for the content property, such as "â™¥". 
Remember to undo these changes when you are done so the tests pass.

-------------------------------------------------------

.key.black--key::after {
  background-color:#1d1e22;
  content:"";
}

-------------------------------------------------------

The img element needs its parent to have a position 
set as a point of reference. 
Set the position of the #piano selector to relative.

-------------------------------------------------------

The @media at-rule, also known as a media query, 
is used to conditionally apply CSS. 
Media queries are commonly used 
to apply CSS based on the viewport width 
using the max-width and min-width properties.

In the below example the padding is applied 
to the .card class when the viewport is 960px wide and below.

@media (max-width: 960px) {
  .card {
    padding: 2rem;
  }
}
Add a media query that will be applied 
when the viewport is 768px wide and below.

@media (max-width: 768px) {
  #piano {
    width: 358px;
  }

  .keys {
    width: 318px;
  }

  .logo {
    width: 150px;
  }
}

-------------------------------------------------------

You might have noticed the keys collapse when 
the browser window is smaller than 768px. 
Set overflow to hidden in the first .keys selector, 
to take care of this issue. 
This property will hide any element that is 
pushed outside the set width value of .keys.

Logical operators can be used to construct more complex media queries. 
The and logical operator is used to query two media conditions.

For example, a media query that targets 
a display width between 500px and 1000px would be:

@media (min-width: 500px) and (max-width: 1000px){

}
Add another @media rule to apply if the browser 
window is wider than 769px but smaller than 1199px.



*/

html {
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}

#piano {
  background-color: #00471b;
  width: 992px;
  height: 290px;
  margin: 80px auto;
  padding: 90px 20px 0 20px;
  position: relative;
  border-radius: 10px;
}

.keys {
  background-color: #040404;
  width: 949px;
  height: 180px;
  padding-left: 2px;
  overflow: hidden;
}

.key {
  background-color: #ffffff;
  position: relative;
  width: 41px;
  height: 175px;
  margin: 2px;
  float: left;
  border-radius: 0 0 3px 3px;
}

.key.black--key::after {
  background-color: #1d1e22;
  content: "";
  position: absolute;
  left: -18px;
  width: 32px;
  height: 100px;
  border-radius: 0 0 3px 3px;
}

.logo {
  width: 200px;
  position: absolute;
  top: 23px;
}

@media (max-width: 768px) {
  #piano {
    width: 358px;
  }

  .keys {
    width: 318px;
  }

  .logo {
    width: 150px;
  }
}

@media (max-width: 1199px) and (min-width: 769px) {
  #piano {
    width:675px;
  }

  .keys {
    width:633px;
  }
}